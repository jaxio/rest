/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package fr.jaxio.domain;

import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
import org.hibernate.search.annotations.Analyzer;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.validator.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.google.common.base.Objects;
import fr.jaxio.domain.Address_;
import fr.jaxio.domain.IdentifiableHashBuilder;

@Entity
@Table(name = "ADDRESS")
@Indexed
@JsonSerialize(include=Inclusion.NON_EMPTY)
public class Address implements Identifiable<Integer>, Serializable, Copyable<Address> {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(Address.class);

    // Raw attributes
    private Integer id; // pk
    private String streetName;
    private String city; // not null
    private Integer version;

    // -- [id] ------------------------

    @Override
    @Column(name = "ID", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public Address id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [streetName] ------------------------

    @Size(max = 100)
    @Column(name = "STREET_NAME", length = 100)
    public String getStreetName() {
        return streetName;
    }

    public void setStreetName(String streetName) {
        this.streetName = streetName;
    }

    public Address streetName(String streetName) {
        setStreetName(streetName);
        return this;
    }

    // -- [city] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Column(name = "CITY", nullable = false, length = 100)
    @Field(analyzer = @Analyzer(definition = "custom"))
    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Address city(String city) {
        setCity(city);
        return this;
    }

    // -- [version] ------------------------

    @Column(name = "VERSION", precision = 10)
    @Version
    public Integer getVersion() {
        return version;
    }

    public void setVersion(Integer version) {
        this.version = version;
    }

    public Address version(Integer version) {
        setVersion(version);
        return this;
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Address && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Address instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add(Address_.id.getName(), getId()) //
                .add(Address_.streetName.getName(), getStreetName()) //
                .add(Address_.city.getName(), getCity()) //
                .add(Address_.version.getName(), getVersion()) //
                .toString();
    }

    /**
     * Return a copy of the current object
     */
    @Override
    @Transient
    @XmlTransient
    public Address copy() {
        Address address = new Address();
        copyTo(address);
        return address;
    }

    /**
     * Copy the current properties to the given object
     */
    @Override
    @Transient
    @XmlTransient
    public void copyTo(Address address) {
        address.setId(getId());
        address.setStreetName(getStreetName());
        address.setCity(getCity());
        address.setVersion(getVersion());
    }
}