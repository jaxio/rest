/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/RepositoryTest.e.vm.java
 */
package fr.jaxio.repository;

import static org.fest.assertions.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import fr.jaxio.domain.Address;
import fr.jaxio.repository.AddressRepository;
import fr.jaxio.dao.AddressDao;
import fr.jaxio.dao.support.SearchParameters;

/**
 * Unit test on AddressRepository
 */
@RunWith(MockitoJUnitRunner.class)
public class AddressRepositoryTest {

    @Mock
    private AddressDao addressDao;

    @InjectMocks
    private AddressRepository addressRepository;

    @Test
    public void findUniqueOrNoneReturnsNull() {
        when(addressDao.findUniqueOrNone(any(Address.class), any(SearchParameters.class))).thenReturn(null);

        Address result = addressRepository.findUniqueOrNone(new Address());

        assertThat(result).isNull();
        verify(addressDao, times(1)).findUniqueOrNone(any(Address.class), any(SearchParameters.class));
    }

    @Test
    public void findUniqueOrNoneReturnsSingleValue() {
        Address unique = new Address();

        when(addressDao.findUniqueOrNone(any(Address.class), any(SearchParameters.class))).thenReturn(unique);

        Address result = addressRepository.findUniqueOrNone(new Address());

        assertThat(result).isNotNull().isSameAs(unique);
        verify(addressDao, times(1)).findUniqueOrNone(any(Address.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void findUniqueOrNoneThrowsExceptionWhenNonUniqueResults() {
        when(addressDao.findUniqueOrNone(any(Address.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        addressRepository.findUniqueOrNone(new Address());
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NoResultException.class)
    public void findUniqueThrowsExceptionWhenNoResult() {
        when(addressDao.findUnique(any(Address.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        addressRepository.findUnique(new Address());
    }

    @Test
    public void findUnique() {
        Address unique = new Address();

        when(addressDao.findUnique(any(Address.class), any(SearchParameters.class))).thenReturn(unique);

        Address result = addressRepository.findUnique(new Address());

        assertThat(result).isNotNull();
        verify(addressDao, times(1)).findUnique(any(Address.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void findUniqueThrowsExeptionWhenNonUniqueResult() {
        when(addressDao.findUnique(any(Address.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        addressRepository.findUnique(new Address());
    }
}